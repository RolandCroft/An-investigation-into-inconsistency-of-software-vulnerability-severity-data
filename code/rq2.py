# Statistical analysis of correlated features to bug report inconsistency
import pandas as pd
import numpy as np
import statsmodels.api as sm
from scipy.stats import chi2_contingency, wilcoxon
from sklearn.metrics import roc_auc_score

# Load the data
df = pd.read_csv("data/processed_bug_report_data.csv")
# Add column assessing whether correctly judged or not
def changed(row):
    if row['Norm BR Severity'] == row['Norm Advisory Severity']:
        return 1
    else:
        return 0
df['Severity Correct'] = df.apply(lambda x: changed(x), axis=1)

# Pearson's chi-square test of independence
def chi_square_test(df, column):
    # Construct the contingency table (rows = x, columns = outcome (higher, lower, same))
    c_table = []
    for i in df[column].value_counts().index:
        correct_freqs = len(df[(df[column] == i) & (df['Severity Correct'] == 1)])
        incorrect_freqs = len(df[(df[column] == i) & (df['Severity Correct'] == 0)])
        c_table.append(np.array([correct_freqs, incorrect_freqs]))
    c_table = np.asarray(c_table)
    print(c_table)

    # Perform the statistical test
    return chi2_contingency(c_table)

# Investigate CWE Type
# Convert CWEs to max-parent
f = open("code/cwe_graph_highlevel.txt", 'r')
cwe_graph = {'CWE-' + line.split()[0]: line.split()[1].split('/')[-1] for line in f}
# print(cwe_graph)
df['Group_CWE'] = df['CWE'].apply(lambda x: cwe_graph[x] if x in cwe_graph else x.split('-')[-1])
df['Group_CWE'].value_counts()
# Clean the CWEs
df_cwe = df[(df['Group_CWE'] != 'noinfo') & (df['Group_CWE'] != 'Other') & (df['Group_CWE'] != 'ID')]
# Remove any identifier with <30 frequency
df_cwe = df_cwe.groupby('Group_CWE').filter(lambda x: len(x) >= 30)
df_cwe['Group_CWE'].value_counts()
# Run the statistical test
print('Chi Square Test for CWE Type:')
print(chi_square_test(df_cwe, 'Group_CWE'))

### Regression Analysis ###
print('\nRegression Analysis:')
# Get the independent variables
features = ['Reporter Patches Submitted', 'Fix Time', 'Reporter Profile Age', 'Number of CC', 'Description Length',
            'Number of Comments', 'Number of Users', 'Number of Changes', 'Is Crash', 'Reporter Bugs Verified']
X = df[features]
# Fit a logistic regression model for severity correctness
y = df['Severity Correct']
logit = sm.Logit(y, X)
logit = logit.fit()
print('AUC: ', roc_auc_score(y, logit.predict()))
print(logit.summary())
