# RQ1 - Investigation into nature of SV Severity inconsistency
import pandas as pd
import numpy as np
from scipy.stats import mannwhitneyu, spearmanr
# MatPlotLib
import matplotlib
import matplotlib.cm
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
# Seaborn
import seaborn as sns
# Plotly
import plotly.graph_objects as go
sns.set()
sns.set_style("whitegrid")
sns.set_style({'font.family':'serif', 'font.serif':'Times New Roman', 'font.color':'black'})

# Load the data
df = pd.read_csv("data/processed_bug_report_data.csv")
# Add column assessing whether correctly judged or not
def changed(row):
    if row['Norm BR Severity'] == row['Norm Advisory Severity']:
        return 1
    else:
        return 0
df['Severity Correct'] = df.apply(lambda x: changed(x), axis=1)

### Determine Distribution ###
print('Change for Bugzilla to NVD')
print('Total Data: ', len(df))
print('Increase: ', len(df[df['Severity Change'] == 'Increase']))
print('Same: ', len(df[df['Severity Change'] == 'Same']))
print('Decrease: ', len(df[df['Severity Change'] == 'Decrease']))

# Determine change from NVD to Advisory
# Mapping of severity rankings to integer
severity_ints = {'none': 0, 'low': 1, 'medium': 2, 'high': 3, 'critical': 4}
# Determine whether the assessment went up or down
def determine_change(row):
    if severity_ints[row['Norm CVSS2 Severity']] < severity_ints[row['Norm Advisory Severity']]:
        return 'Increase'
    elif severity_ints[row['Norm CVSS2 Severity']] > severity_ints[row['Norm Advisory Severity']]:
        return 'Decrease'
    elif severity_ints[row['Norm CVSS2 Severity']] == severity_ints[row['Norm Advisory Severity']]:
        return 'Same'
df['Advisory Severity Change'] = df.apply(determine_change, axis=1)
print('\nChange for NVD to Mozilla Advisory')
print('Total Data: ', len(df))
print('Increase: ', len(df[df['Advisory Severity Change'] == 'Increase']))
print('Same: ', len(df[df['Advisory Severity Change'] == 'Same']))
print('Decrease: ', len(df[df['Advisory Severity Change'] == 'Decrease']))

# Calculate statistical tests
# Determine nature of priority for those that are correct severity compared to those that are incorrectly estimated.
correct = list(df[df['Severity Correct'] == 1]['Priority'])
incorrect = list(df[df['Severity Correct'] != 1]['Priority'])
print('\nMann Whitney U Test for Prioritization Ordering:')
print(mannwhitneyu(correct, incorrect, alternative='less'))
# Calculate Rank Order Correlation (Spearman's rho)
severity_ints = {'none': 0, 'low': 1, 'medium': 2, 'high': 3, 'critical': 4}
br_ints = [severity_ints[x] for x in list(df['Norm BR Severity'])]
adv_ints = [severity_ints[x] for x in list(df['Norm Advisory Severity'])]
nvd_ints = [severity_ints[x] for x in list(df['Norm CVSS2 Severity'])]
# Perform statistical tests
# Guide: 0-0.19=very weak, 0.2-0.39=weak, 0.4-0.59=moderate, 0.6-0.79=strong, 0.8-1=very strong
print('\nSpearmans rank order correlation between severity orderings: ')
print('Bugzilla vs Advisory')
print(spearmanr(br_ints, adv_ints))
print('Bugzilla vs NVD')
print(spearmanr(br_ints, nvd_ints))
print('Advisory vs NVD')
print(spearmanr(adv_ints, nvd_ints))

# Investigate duplicates
duplicates = df.groupby('Bug Report').filter(lambda x: len(x) >= 2)
# duplicates.to_csv("data/duplicates.csv", index=False)
# Determine duplicate inconsistency
print('\nDuplicates')
for i in duplicates['Bug Report'].value_counts().index:
    temp = df[df['Bug Report'] == i]
    print(len(temp['Norm CVSS2 Severity'].value_counts()))

### Visualize Distribution ###
# Visualize distribution via histogram
mapping = {'none': 5, 'low': 4, 'medium': 3, 'high': 2, 'critical': 1}
df2 = df.copy()
# Drop nones
df2 = df2[(df2['Norm BR Severity'] != 'none') & (df2['Norm CVSS2 Severity'] != 'none')]
# Faceted KD Plot
df3 = df2.copy()
df3 = df3.rename(columns={'Norm BR Severity': 'Bugzilla', 'Norm CVSS2 Severity': 'NVD', 'Norm Advisory Severity': 'Mozilla Advisory'})
df4 = pd.melt(df3, id_vars=['Bug Report'], value_vars=['Bugzilla', 'Mozilla Advisory', 'NVD'], var_name='Report', value_name='Severity')
df4['Severity'] = df4['Severity'].apply(lambda x: mapping[x])
plt.figure()
ax = sns.FacetGrid(df4, col='Report')
ax.map_dataframe(sns.histplot, x='Severity', bins=4, discrete=True, fill=True)
ax.set_axis_labels(x_var='Severity', y_var='Count')
plt.savefig('graphs/severity_histplot.png', bbox_inches="tight", dpi=300)

# Visualize change as Sankey Diagram
# Source indices, target indices, and value of connections
source = [0]*5 + [1]*5 + [2]*5 + [3]*5 + [4]*5 + [5]*5 + [6]*5 + [7]*5 + [8]*5 + [9]*5
target = [5,6,7,8,9]*5 + [10,11,12,13,14]*5
value = [0]*50
# Calculate flow of severity values
### May need to normalize this in some way
for c, i in enumerate(['critical', 'high', 'medium', 'low', 'none']):
    for d, j in enumerate(['critical', 'high', 'medium', 'low', 'none']):
        # Determine flow of bug report to Advisory
        flow1 = len(df[(df['Norm BR Severity'] == i) & (df['Norm Advisory Severity'] == j)])
        value[5*c+d] = flow1
        # Determine flow of Advisory to NVD
        flow2 = len(df[(df['Norm Advisory Severity'] == i) & (df['Norm CVSS2 Severity'] == j)])
        value[25+(5*c+d)] = flow2

# Make Sankey Diagram
plt.figure()
fig = go.Figure(data=[go.Sankey(
    arrangement = "freeform",
    node = dict(
      pad = 15,
      thickness = 20,
      line = dict(color = "black", width = 0.5),
      label = ["Critical", "High", "Medium", "Low", "None"]*3,
      x = [0]*5 + [0.5]*5 + [1]*5,
      y = [0, 0.25, 0.5, 0.75, 1]*3,
    ),
    link = dict(
      source = source, target = target, value = value))])
fig.update_layout(title_text="SV Severity Ranking Distribution", font_size=10)
plt.savefig('graphs/ranking_distribution.png', bbox_inches="tight", dpi=300)
